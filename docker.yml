# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  imageName: 'your-container-image-name'
  BASE_IMAGE_NAME: 'rust:1.31'
  system.debug: 'true'
  agent.diagnostic: 'true'
  DOCKER_FOLDER: '$(Pipeline.Workspace)/dockercache'
  DOCKER_FILE: '$(DOCKER_FOLDER)/images'
  IMAGES: '$(imageName) $(BASE_IMAGE_NAME)'
  DOCKER_CACHE_HIT_COMMAND: 'docker build --cache-from=$(BASE_IMAGE_NAME) -f Dockerfile -t $(imageName) .'
  DOCKER_CACHE_MISS_COMMAND: 'docker build --rm=false -f Dockerfile -t $(imageName) .'
  TIMES_I_MESSED_UP: 5

steps:
- task: RestoreCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/DockerFile
      $(Agent.OS) $(Agent.JobName)
      DOCKER_FILE = $(DOCKER_FILE)
      $(IMAGES)
      $(DOCKER_CACHE_HIT_COMMAND)
      $(DOCKER_CACHE_MISS_COMMAND)
      TIMES_I_MESSED_UP = $(TIMES_I_MESSED_UP)
    path: '$(DOCKER_FOLDER)'
    cacheHitVar: 'DockerCacheHit'
# - script: docker images --all
#   displayName: Dump images

- script: |
    if [[ -f $(DOCKER_FILE) ]]; then docker load -i $(DOCKER_FILE) ; fi
  condition: and(succeeded(), eq(variables['PipelineCache.DockerCacheHit'], 'True'))
  
# - script: docker images --all
#   displayName: Dump images

- script: $(DOCKER_CACHE_HIT_COMMAND)
  displayName: 'docker build (cache hit)'
  condition: and(succeeded(), eq(variables['PipelineCache.DockerCacheHit'], 'True'))

- script: $(DOCKER_CACHE_MISS_COMMAND)
  displayName: 'docker build (cache miss)'
  condition: and(succeeded(), ne(variables['PipelineCache.DockerCacheHit'], 'True'))

# - script: docker images --all
#   displayName: Dump images  

- script: |
    mkdir $(DOCKER_FOLDER)
    docker save -o $(DOCKER_FILE) $(IMAGES)
  condition: and(succeeded(), ne(variables['PipelineCache.DockerCacheHit'], 'True'))
- task: SaveCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/DockerFile
      $(Agent.OS) $(Agent.JobName)
      DOCKER_FILE = $(DOCKER_FILE)
      $(IMAGES)
      $(DOCKER_CACHE_HIT_COMMAND)
      $(DOCKER_CACHE_MISS_COMMAND)
      TIMES_I_MESSED_UP = $(TIMES_I_MESSED_UP)
    path: $(DOCKER_FOLDER)
  condition: and(succeeded(), ne(variables['PipelineCache.DockerCacheHit'], 'True'))
  