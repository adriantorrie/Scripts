# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  imageName: 'your-container-image-name'
  system.debug: 'true'
  agent.diagnostic: 'true'
  DOCKER_FOLDER: '/var/lib/docker'
  DOCKER_FOLDER_TAR_FOLDER: '$(Pipeline.Workspace)/dockercache'
  DOCKER_FOLDER_TAR: '$(DOCKER_FOLDER_TAR_FOLDER)/docker.tar'
  DOCKER_COMMAND: 'docker build --rm=false -f Dockerfile -t $(imageName) .'
  TAR_COMMAND: 'tar -cf $(DOCKER_FOLDER_TAR) --absolute-names $(DOCKER_FOLDER)'
  TIMES_I_MESSED_UP: 7

steps:
- script: |
    ls $(System.DefaultWorkingDirectory)/Dockerfile
    cat $(System.DefaultWorkingDirectory)/Dockerfile
- task: RestoreCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/Dockerfile
      $(Agent.OS) $(Agent.JobName)
      DOCKER_FILE = $(DOCKER_FILE)
      $(DOCKER_FOLDER)
      $(DOCKER_COMMAND)
      $(TAR_COMMAND)
      tar file is $(DOCKER_FOLDER_TAR)
      TIMES_I_MESSED_UP = $(TIMES_I_MESSED_UP)
    path: '$(DOCKER_FOLDER_TAR_FOLDER)'
    cacheHitVar: 'DockerCacheHit'
- script: |
    docker images --all
    sudo service docker stop
    sudo tar -xf $(DOCKER_FOLDER_TAR) --absolute-names $(DOCKER_FOLDER)
    sudo service docker start
  condition: and(succeeded(), eq(variables['PipelineCache.DockerCacheHit'], 'True'))

- script: |
    docker rmi $(docker images -a -q)
    docker system prune --all --force
  condition: and(succeeded(), ne(variables['PipelineCache.DockerCacheHit'], 'True'))
  displayName: clear out existing images (hack)

- script: docker images --all
  displayName: Dump images

- script: $(DOCKER_COMMAND)
  displayName: 'docker build'

- script: docker images --all
  displayName: Dump images  

- script: |
    sudo service docker stop
    mkdir $(DOCKER_FOLDER_TAR_FOLDER)
    sudo $(TAR_COMMAND)
  condition: and(succeeded(), ne(variables['PipelineCache.DockerCacheHit'], 'True'))
  
- task: SaveCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/Dockerfile
      $(Agent.OS) $(Agent.JobName)
      DOCKER_FILE = $(DOCKER_FILE)
      $(DOCKER_FOLDER)
      $(DOCKER_COMMAND)
      $(TAR_COMMAND)
      tar file is $(DOCKER_FOLDER_TAR)
      TIMES_I_MESSED_UP = $(TIMES_I_MESSED_UP)
    path: $(DOCKER_FOLDER_TAR_FOLDER)
  condition: and(succeeded(), ne(variables['PipelineCache.DockerCacheHit'], 'True'))
  