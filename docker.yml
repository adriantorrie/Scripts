# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  imageName: 'your-container-image-name'
  system.debug: 'true'
  agent.diagnostic: 'true'
  DOCKER_FOLDER: '/var/lib/docker'
  DOCKER_FOLDER_TAR_FOLDER: '$(Pipeline.Workspace)/dockercache'
  DOCKER_FOLDER_TAR: '$(DOCKER_FOLDER_TAR_FOLDER)/docker.tar'
  DOCKER_COMMAND: 'docker build --rm=false -f Dockerfile -t $(imageName) .'
  TAR_COMMAND: 'tar -cf $(DOCKER_FOLDER_TAR) --absolute-names $(DOCKER_FOLDER)'
  TIMES_I_MESSED_UP: 10
  CACHE_KEY_BASE: |
    $(Agent.OS) $(Agent.JobName)
    DOCKER_FILE = $(DOCKER_FILE)
    $(DOCKER_FOLDER)
    $(DOCKER_COMMAND)
    $(TAR_COMMAND)
    tar file is $(DOCKER_FOLDER_TAR)
    TIMES_I_MESSED_UP = $(TIMES_I_MESSED_UP)
  CACHE_KEY_EXACT: |
    $(CACHE_KEY_BASE)
    $(System.DefaultWorkingDirectory)/Dockerfile
  # CACHE_FALLBACK_COMMIT_FILE: $(Pipeline.Workspace)/common_commit.txt
  # CACHE_KEY_FALLBACK: |
  #   $(CACHE_KEY_BASE)
  #   $(CACHE_FALLBACK_COMMIT_FILE)

steps:
- task: RestoreCache@0
  inputs:
    key: $(CACHE_KEY_EXACT)
    path: '$(DOCKER_FOLDER_TAR_FOLDER)'
    cacheHitVar: 'DockerCacheHitExact'
  displayName: 'Look for exact hit'

# - script: |
#     git merge-base -a origin/master HEAD > $(CACHE_FALLBACK_COMMIT_FILE)
#     cat $(CACHE_FALLBACK_COMMIT_FILE)
#   # condition: and(succeeded(), ne(variables['PipelineCache.DockerCacheHitExact'], 'True'))

# - task: RestoreCache@0
#   inputs:
#     key: $(CACHE_KEY_FALLBACK)
#     path: '$(DOCKER_FOLDER_TAR_FOLDER)'
#     cacheHitVar: 'DockerCacheHitFallback'
#   displayName: 'Look for inexact hit'
#   condition: and(succeeded(), ne(variables['PipelineCache.DockerCacheHitExact'], 'True'))

- script: |
    docker images --all
    sudo service docker stop
    if [ -f "$DOCKER_FOLDER_TAR" ]; then
        sudo tar -xf $(DOCKER_FOLDER_TAR) --absolute-names $(DOCKER_FOLDER)
    else
        sudo rm -Rf $(DOCKER_FOLDER)
    fi
    sudo service docker start
    docker images --all
  displayName: 'Extract TAR if we have one; otherwise clear things out'

- script: $(DOCKER_COMMAND)
  displayName: 'docker build'

- script: docker images --all
  displayName: Dump images  

- script: |
    sudo service docker stop
    mkdir $(DOCKER_FOLDER_TAR_FOLDER)
    sudo $(TAR_COMMAND)
  condition: and(succeeded(), ne(variables['PipelineCache.DockerCacheHitExact'], 'True'))
  # condition: and(succeeded(), or(ne(variables['PipelineCache.DockerCacheHitExact'], 'True'),ne(variables['PipelineCache.DockerCacheHitFallback'], 'True')))
  displayName: 'TAR up the docker folder'
  

# - task: SaveCache@0
#   inputs:
#     key: $(CACHE_KEY_FALLBACK)
#     path: '$(DOCKER_FOLDER_TAR_FOLDER)'
#   condition: and(and(succeeded(), ne(variables['PipelineCache.DockerCacheHitFallback'], 'True')), eq(variables['Build.SourceBranchName'], 'master'))
- task: SaveCache@0
  inputs:
    key: $(CACHE_KEY_EXACT)
    path: '$(DOCKER_FOLDER_TAR_FOLDER)'
  condition: and(and(succeeded(), ne(variables['PipelineCache.DockerCacheHitExact'], 'True')), eq(variables['Build.SourceBranchName'], 'master'))
  