# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  imageName: 'your-container-image-name'
  system.debug: 'true'
  agent.diagnostic: 'true'
  DOCKER_FOLDER: '/var/lib/docker'
  DOCKER_COMMAND: 'docker build --rm=false -f Dockerfile -t $(imageName) .'
  TIMES_I_MESSED_UP: 5

steps:
- script: |
    sudo service docker stop
    sudo chmod -R 0777 $(DOCKER_FOLDER)
    du $(DOCKER_FOLDER)
- task: RestoreCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/DockerFile
      $(Agent.OS) $(Agent.JobName)
      DOCKER_FILE = $(DOCKER_FILE)
      $(DOCKER_FOLDER)
      $(DOCKER_COMMAND)
      TIMES_I_MESSED_UP = $(TIMES_I_MESSED_UP)
    path: '$(DOCKER_FOLDER)'
    cacheHitVar: 'DockerCacheHit'
- script: sudo service docker start
- script: docker images --all
  displayName: Dump images

- script: $(DOCKER_COMMAND)
  displayName: 'docker build'

- script: docker images --all
  displayName: Dump images  

- script: |
    sudo service docker stop
    sudo chmod -R 0777 $(DOCKER_FOLDER)
    du $(DOCKER_FOLDER)

- task: SaveCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/DockerFile
      $(Agent.OS) $(Agent.JobName)
      DOCKER_FILE = $(DOCKER_FILE)
      $(DOCKER_FOLDER)
      $(DOCKER_COMMAND)
      TIMES_I_MESSED_UP = $(TIMES_I_MESSED_UP)
    path: $(DOCKER_FOLDER)
  condition: and(succeeded(), ne(variables['PipelineCache.DockerCacheHit'], 'True'))
  